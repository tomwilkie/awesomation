#!/bin/bash

set -eu

PYLINT_DISABLE=import-error,locally-disabled,no-member,maybe-no-member,no-init,star-args,super-on-old-class,bare-except,no-self-use
SPELLINGS=brigth
EXIT_CODE=0

function quietly() {
  output=$($@ 2>&1) || echo $output
}

function spellcheck() {
  filename=$1
  ! grep -i --color ${SPELLINGS} ${filename} || EXIT_CODE=$?
}

function lint {
  filename=$1
  ext=${filename##*\.}

  # If this is a directory, then lint the files in it
  if [[ -d ${filename} ]]; then
    find ${filename} -type f | while read filename; do
      lint ${filename}
    done
    return
  fi

  # Don't lint this script
  if [ "${filename}" == "bin/lint" ]; then
    return
  fi

  # Don't lint tests
  if [[ "${filename}" == *_tests.py ]]; then
    return
  fi

  spellcheck ${filename}
  case "$ext" in
    py)
      /usr/local/bin/pylint --rcfile=.pylintrc -rno --disable=$PYLINT_DISABLE ${filename} || EXIT_CODE=$?
      ;;
    js)
      /usr/local/bin/jshint ${filename} || EXIT_CODE=$?
      ;;
    html)
      java -jar ~/bin/vnu.jar ${filename}
      quietly bootlint -d W002 ${filename}
      ;;
    css)
      quietly csslint --ignore=adjoining-classes,box-model,ids,box-sizing,vendor-prefix,qualified-headings ${filename}
      ;;
  esac
}

if [ $# -gt 0 ]; then
  for filename in $@; do
    lint ${filename}
  done
else
  #git stash -q --keep-index
  git diff --cached --name-only | while read filename; do
    if [ ! -e "${filename}" ]; then
      continue
    fi

    lint ${filename}
  done
  #git stash pop -q
fi

exit $EXIT_CODE
